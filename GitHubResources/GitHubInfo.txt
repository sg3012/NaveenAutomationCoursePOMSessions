- There are 2 sites in the Git world:
1. The local site : Which is the local machine having the code base on which you are working
2. The remote site : Which is the remote website (GitHub.com) having the code base which push to
and pull from.

- The local site is also called Workspace or working directory. Meaning the folder
  in which the whole project exists.

- [RECOMMENDED] The number of repositories on the remote site should be equal to the 
  number of projects on the local site i.e., if we have 2 projects for different products with 
  different code base in our local machines then we should have 2 Repositories on the Remote
  site for better code maintenance
  
  - The dot in the .git folder in any project means it is a hidden folder. In fact, dot
  just before the folder name means it is a hidden folder in most of the OS 
  
  - The whole project code is in the working directory ( the folder in which the whole
     project exists) until you add that code to the staging/index area using Git add
     command
    
   - The project comes under LOCAL REPO whenever you commit the code in your working
   directory.
   
   - Whenever you push a code to any branch on remote Git creates a branch with the same
   name in your local machine too for the tracking purpose
	
  - There are following statuses git uses to keep track of files:
     --> UNTRACKED - These are the files which are never committed in any of the branches
     and added in the staging area ever and pushed to github from any of the branches ever.
     
     --> TRACKED: These are the files which are added to the stage area but never committed and pushed.
     
     --> MODIFIED: These are the files which have already been pushed to the remote repo to the github once
     but now some changes have been made in the working directory in the local machine. 
     
     --> REMEMBER, when you have already added the entire code base of your project
     once in the staging area using "git add . " don't use the same command when
     you have just modified few files in your local and want to push that. If you use
     the same add command again and again even while pushing a few files it will
     add the entire code base again and again in the staging area which is not good.
     
     --> The latest commit in the whole commit list in any of the branch is called the HEAD of the
     branch
     
     --> It is not recommended to merge the local branches into the master because
     what if the PR raised for the local branch is not approved and you merge the
     un-approved code into the master. This will make maintenance of the master
     branch very difficult as we may have remove the unwanted code from master
     that could be very time taking. This is called polluting your local master with
     unwanted code.
     
     --> git log: This command is used to get the list of all commits till now in the local repo. 
     
     --> git log --oneline: This command is used get very brief details of all the commits
     done so far in the local repo in only one line
     
     --> git shortlog [IMPORTANT]: This command gives the details of how many
     contributors are there in the project and how many commits have been done
     by each contributor to all the branches.
     
     --> git log --oneline --reverse: To get the commit history/log in one line
     per commit and in ascending order
     
     --> git show <commit-ID> :  To get the details of what happened with a particular commit ID.
     
     --> git show HEAD : what code changes happened as part of the latest commit in the project on that particular branch
     
     --> git show HEAD:<file-path> : what code changes happened in a particular  file as part of the latest commit in 
     the project on that particular branch
     
     --> git log -<number-of-logs>: shows only the number of logs as specified by <number-of-logs>. For e.g.
     git log -3 will show only last 3 logs.
     
     --> git log --author="<author-name>" : shows the commit log for a particular author defined by <author-name>
     
     --> git log --before="<date in yyyy-mm-dd format>": shows the commit log from the date provided and before.  
     
     --> git log <file-path>: shows the commit history/log for the file path specified.
     
     --> git log <commit ID1..commitIDn>: shows the commit log between a commit range ( say between commit 1 to commit 4). 
     Remember only 2 dots MUST be present between the commit range.
     
     --> git log --stat: gives the commit history in the entire project on each branch with some details on
     the files changed in each commit like number of insertions, deletions, number of files changed etc.
     
     --> git branch : how many branches in my local along with the branch name(s).
     
     --> git branch -r: how many branches in the remote site along with the branch name(s).
     
     --> git push -d <remote-name> <remote-branch-name> : delete a branch from remote site.
   
     --> git branch -d <branch-name>: delete a local branch if there are no unmerged changes in
     the branch left due to some merge conflicts or some other reasons.
     
     --> git branch -D <branch-name>: delete a local branch forcefully even if there are 
     unmerged changes in the branch left. (Remember UPPERCASE D is used
     in this command).
     NOTE: While deleting a local branch keep in mind to switch to some branch other than
     the one you want to delete. Otherwise, you will not be able to delete it.
     
     --> git merge <branch-name> : to merge a local branch into another local branch
     
     --> git tag <tag-name>: to add a tag to the latest commit ( changes ) in a local branch
     
     --> git push <remote-name> <tag-name>: to push the created TAG on a local branch to the
     same remote branch.
     NOTE: While pushing a tag along with the code changes to remote branch it is not mandatory
     to specify the name of the remote branch in the command. Git will automatically push the code
     to the same remote branch as the local branch.
     
     --> git merge <remote-name>/<remote-branch-name>: to merge and reflect the changes 
     from the remote branch into the current local branch or working directory.
     
     [IMPORTANT INTERVIEW] : Difference between FORK and CLONE:
     - Clone downloads and copies the project files into the local system
     - Fork copies the project files only on the remote site ( GitHub ) but not on the local, under your GitHub account name.
     
     [IMPORTANT INTERVIEW] : Difference between FETCH and PULL:
     - The pull command will fetch the source code changes from the remote, stores it in
     the local repository and actually updates the required files in the working copy of the
     source code in local whereas the FETCH command will only fetch the source code changes 
     from the remote and stores it in the local repository on the local. It doesn't actually update the 
     required files in the working copy/directory. To actually reflect the remote changes in the 
     working copy we have to use Git MERGE after fetch. Following is the SYNTAX of MERGE command:
     
     git merge <remote-name>/<remote-branch-name>
   
     - In real time automation projects we don't use git fetch and merge much instead we just use
       git pull. Git fetch and merge is used by the development teams because there are some
       cases where they don't want merge the changes by other developers directly into their
       branch. For e.g. there might be a feature which 2 devs are working on together and one
       developer has completed his changes while the other is still working. So, the other one might
       fetch his fellow developer's code and continue to first complete his work on his branch and 
       then merge his fellow dev's changes.
     
     ################ MERGE CONFLICTS ####################
     - What are the merge conflicts?
     Ans: They are the code changes which happen on the same lines of code and the version
     management tools like Git can't decide which piece of code to merge. This generally happens
     when 2  or more developers are working on the same feature, in most of the cases. 
     Merge couldn't be resolved automatically by the version control tool itself, we have
     to resolve them manually after discussing with other team-mate(s) whose code is causing
     the conflict and finding ways to accept the correct code snippet. 
     
     - How to identify the incoming/remote site changes in a Merge conflict?
     Ans: To identify those changes focus on the multiple equal to signs ( like this ==========)
     and commit ID displayed beside multiple right hand side arrows ( like >>>>>>>>> ).
     The changes displayed below the multiple equal to signs and above the commit ID  
     are the incoming/remote site changes. 
     NOTE: There is no need to identify the local changes in a merge conflict as 
     the developer who is getting the merge conflict must know the changes he himself has
     done in the file in his local on the feature branch he is working. But if you still want to identify the
     local changes those are the ones which are above the equal to signs and below the 
     written text HEAD with incoming arrows ( like <<<<<<<<).
     
     - How to resolve the merge conflicts?
     Ans: It is strongly recommended that the developers' whose code files are 
     getting merge conflicts after trying a git pull, should sit with each other and decide whose
     code is better and should be accepted for the further development. Once the final code
     is accepted by mutual agreement then only the unwanted code should be removed and 
     conflict be resolved. NEVER remove the code by deciding yourself that which code is better
     and which is not that good. Conflicts must have mutual agreements between the developers
     whose code files have conflicted code, before deciding which code to keep.
     
     - In which cases we will get the Merge Conflicts?
     Ans: 1. When pulling some code from a remote branch to a local branch
     		 2. When fetching and merging some code from a remote branch into a local branch
     		 3. When doing some code merge of local master branch to another local feature branch
     		 4. When merging some code from a remote branch (say, f1) to a different local branch (say, f2) 
     		 5. When doing some code merge of local feature branch to the local master branch
    
     - How can we avoid conflicts?
     Ans: We have to prevent 2 or more devs to be working on the same feature, functionality
     and the method(s) as the same time, as much as possible. Sometimes, it is not possible practically
     but try to follow this practice frequently in the real-time projects. 	 
          
     --> HOW PROVIDE REVIEW COMMENTS IN A PULL REQUEST:
           1. Login to github account.
           2. Go to Repositories tab.
           3. Go to the Repository you have the pull request for.
           4. Go to the pull requests tab under that repository.
           5. Click the pull request link you want to provide the review comments for from the list.
           6. On the details page click the files changed tab.
           7. Click the + icon in the Green area which shows the new changes against the line of code which you want.
               to make changes in.
           8. Write a comment in the text area for leaving comment.
           9. Click add single comment button and your comment will be added.
           
      --> There could be 3 actions while Reviewing a PR in Github:
            1. Comment : Providing an overall comment(s) to the PR without explicitly approving or rejecting it. 
                This means the PR status will remain Open.
            2. Approve : Changing the PR status to Approved explicitly.
            3. Request changes : Changing the PR status to Reject explicitly.
  
  - We ignore the following files / folders to be pushed to the source code mgmnt. tool
  like Git by putting them in .gitignore file:
  	1. Test output folder created by testNG
  	2. allure-results folder having allure reports JSON format created by Allure Reports library
  	3. Screenshots folder created after running different test runs.
  	4. build folder created by Maven
  	5. Reports folder created by Extent Reports etc.
  	6. Some particular files/folders created by some specific text editors like
  	   .settings folder by Eclipse, out/ folder created by IntelliJ
  	7. Some particular files created by some OS like .DS_Store created by MacOSX 
  	8. All the JAR files / dependencies for different libraries
  	
  - Following are the syntaxes we use to move files and folders in .gitignore file:
    ---> To move any specific file with full file name (including extension): <filename.extension>
    ---> To move any file with a very specific file extension : <*.fileextension>, here * means any
           file having the fileextension
    ---> To move specific folder: <foldername/>
    
    - [IMPORTANT-INTERVIEW] : What is the local branching process or remote branching process
      in your company or PR process in your team?
      ---> Ans: I am the developer in the project here is the PR process in the team:
      We have a remote repository setup in the project on Github. Whenever a new or
      existing developer works on the project the new developer takes the clone of the whole project
      with latest master branch in his local and the existing developer takes the latest code from the remote master into
      the local master branch.  At this point the code version in the local and remote master branches is the same ( say v 1.0 ).
      Now, when I have to work on a new feature I will switch to the local master branch
      with latest code and cut the new feature branch from it. After cutting the new feature branch I checkout to that branch
      and start working on the feature. When I am done working for the feature in the feature branch my working directory
      ( the folder in which the files are ) is pointing to the local feature branch. After the work is done on local feature branch
      I add all the code base in my local feature branch to the staging area and then commit the code to the local repo.
      Then, I push my feature branch in the local to the remote site (GitHub) on the same feature branch. After pushing the code
      to remote I raise a PR using GitHUB UI for review for my TL. Once the PR is approved by my TL, only then the feature
      branch gets merged to the master by TL on the remote site. At this point the code version at the remote master branch
      is different than my local master branch ( say v 2.0 ). So, I take the pull of the latest version of the master branch code
      from remote to the local branch, to stay up to the date with the latest master code on remote. ( see the image 
      GitHubPRProcess_ShortAnswer.PNG at the project root folder for MORE INFO). 
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      